package uz.consortgroup.course_service.service.resourse;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import uz.consortgroup.course_service.asspect.annotation.AllAspect;
import uz.consortgroup.course_service.dto.request.lesson.LessonCreateRequestDto;
import uz.consortgroup.course_service.dto.request.module.ModuleCreateRequestDto;
import uz.consortgroup.course_service.dto.request.resource.ResourceCreateRequestDto;
import uz.consortgroup.course_service.entity.Lesson;
import uz.consortgroup.course_service.entity.Resource;
import uz.consortgroup.course_service.entity.enumeration.MimeType;
import uz.consortgroup.course_service.entity.enumeration.ResourceType;
import uz.consortgroup.course_service.repository.ResourceRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@RequiredArgsConstructor
@Service
public class ResourceServiceImpl implements ResourceService {
    private final ResourceRepository resourceRepository;

    @Override
    @Transactional
    @AllAspect
    public List<Resource> saveResources(List<ModuleCreateRequestDto> moduleDtos, List<Lesson> lessons) {
        List<Resource> resources = new ArrayList<>();
        int lessonIndex = 0;

        for (ModuleCreateRequestDto moduleDto : moduleDtos) {
            for (LessonCreateRequestDto lessonDto : moduleDto.getLessons()) {
                Lesson lesson = lessons.get(lessonIndex++);

                for (ResourceCreateRequestDto resourceDto : lessonDto.getResources()) {
                    resources.add(Resource.builder()
                            .lesson(lesson)
                            .resourceType(resourceDto.getResourceType())
                            .fileUrl(resourceDto.getFileUrl())
                            .fileSize(resourceDto.getFileSize())
                            .mimeType(resourceDto.getMimeType())
                            .orderPosition(resourceDto.getOrderPosition())
                            .build());
                }
            }
        }

        return resourceRepository.saveAll(resources);
    }

    @Override
    public List<Resource> saveAll(List<Resource> resources) {
        resourceRepository.saveAll(resources);
    }


    @Override
    @Transactional
    @AllAspect
    public Resource create(UUID lessonId, ResourceType resourceType, String fileUrl, Long fileSize, MimeType mimeType, Integer orderPosition) {
        return resourceRepository.save(Resource.builder()
                .lesson(Lesson.builder().id(lessonId).build())
                .resourceType(resourceType)
                .fileUrl(fileUrl)
                .fileSize(fileSize)
                .mimeType(mimeType)
                .orderPosition(orderPosition)
                .build());
    }

    @Override
    @AllAspect
    public List<Resource> findResourceById(UUID id) {
        return resourceRepository.findResourceById(id);
    }
}
